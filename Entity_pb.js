// source: Entity.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Combination', null, global);
goog.exportSymbol('proto.Entity', null, global);
goog.exportSymbol('proto.InitEntities', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Entity.displayName = 'proto.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Combination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Combination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Combination.displayName = 'proto.Combination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitEntities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InitEntities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InitEntities.displayName = 'proto.InitEntities';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Entity}
 */
proto.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Entity;
  return proto.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Entity}
 */
proto.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Entity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Entity} returns this
 */
proto.Entity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icon = 2;
 * @return {string}
 */
proto.Entity.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Entity} returns this
 */
proto.Entity.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Combination.prototype.toObject = function(opt_includeInstance) {
  return proto.Combination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Combination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Combination.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: (f = msg.getA()) && proto.Entity.toObject(includeInstance, f),
    b: (f = msg.getB()) && proto.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Combination}
 */
proto.Combination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Combination;
  return proto.Combination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Combination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Combination}
 */
proto.Combination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Combination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Combination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Combination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Combination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getB();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity A = 1;
 * @return {?proto.Entity}
 */
proto.Combination.prototype.getA = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 1));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.Combination} returns this
*/
proto.Combination.prototype.setA = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Combination} returns this
 */
proto.Combination.prototype.clearA = function() {
  return this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Combination.prototype.hasA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Entity B = 2;
 * @return {?proto.Entity}
 */
proto.Combination.prototype.getB = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 2));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.Combination} returns this
*/
proto.Combination.prototype.setB = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Combination} returns this
 */
proto.Combination.prototype.clearB = function() {
  return this.setB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Combination.prototype.hasB = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitEntities.prototype.toObject = function(opt_includeInstance) {
  return proto.InitEntities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitEntities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitEntities.toObject = function(includeInstance, msg) {
  var f, obj = {
    fire: (f = msg.getFire()) && proto.Entity.toObject(includeInstance, f),
    water: (f = msg.getWater()) && proto.Entity.toObject(includeInstance, f),
    air: (f = msg.getAir()) && proto.Entity.toObject(includeInstance, f),
    ground: (f = msg.getGround()) && proto.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitEntities}
 */
proto.InitEntities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitEntities;
  return proto.InitEntities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitEntities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitEntities}
 */
proto.InitEntities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setFire(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setWater(value);
      break;
    case 3:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setAir(value);
      break;
    case 4:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setGround(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitEntities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitEntities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitEntities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitEntities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFire();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getWater();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getAir();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getGround();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity fire = 1;
 * @return {?proto.Entity}
 */
proto.InitEntities.prototype.getFire = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 1));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.InitEntities} returns this
*/
proto.InitEntities.prototype.setFire = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InitEntities} returns this
 */
proto.InitEntities.prototype.clearFire = function() {
  return this.setFire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InitEntities.prototype.hasFire = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Entity water = 2;
 * @return {?proto.Entity}
 */
proto.InitEntities.prototype.getWater = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 2));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.InitEntities} returns this
*/
proto.InitEntities.prototype.setWater = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InitEntities} returns this
 */
proto.InitEntities.prototype.clearWater = function() {
  return this.setWater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InitEntities.prototype.hasWater = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Entity air = 3;
 * @return {?proto.Entity}
 */
proto.InitEntities.prototype.getAir = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 3));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.InitEntities} returns this
*/
proto.InitEntities.prototype.setAir = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InitEntities} returns this
 */
proto.InitEntities.prototype.clearAir = function() {
  return this.setAir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InitEntities.prototype.hasAir = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Entity ground = 4;
 * @return {?proto.Entity}
 */
proto.InitEntities.prototype.getGround = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 4));
};


/**
 * @param {?proto.Entity|undefined} value
 * @return {!proto.InitEntities} returns this
*/
proto.InitEntities.prototype.setGround = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InitEntities} returns this
 */
proto.InitEntities.prototype.clearGround = function() {
  return this.setGround(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InitEntities.prototype.hasGround = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
